/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.math.BigInteger;
import java.util.ArrayList;

public class Day9 {

    public static void main(String[] args) {
        ArrayList<Integer> input = Reader.getInput();
        ArrayList<Integer> diskSpace = convertInputToDiskSpace(input);
        ArrayList<Integer> compressedDisk = compressDiskSpace(diskSpace);

        BigInteger count = calculateCheckSum(compressedDisk);
        System.out.println(count);

    }
    public static BigInteger calculateCheckSum(ArrayList<Integer> input) {
        BigInteger count = BigInteger.ZERO;
        for (int i = 0; i < input.size(); i++) {
            count = count.add(BigInteger.valueOf(i).multiply(BigInteger.valueOf(input.get(i))));
        }
        return count;
    }

    public static ArrayList<Integer> convertInputToDiskSpace(ArrayList<Integer> input) {
        ArrayList<Integer> diskSpace = new ArrayList<>();
        int fileID = 0;

        for(int index = 0; index < input.size(); index++) {
            int fileOrSpaceSize = input.get(index);
            if(index % 2 == 0){
//           file object
                for(int i = 0; i < fileOrSpaceSize; i++) {
                    diskSpace.add(fileID);
                }
                fileID++;
            } else {
//          space
                for(int i = 0; i < fileOrSpaceSize; i++) {
                    diskSpace.add(-1);
                }
            }
        }
        return diskSpace;
    }

    public static ArrayList<Integer> compressDiskSpace(ArrayList<Integer> input) {
        ArrayList<Integer> compressedDiskSpace = new ArrayList<>(input.size());
        int indexOfLastFileToMoveToFront = input.size() - 1;

        for(int index = 0; index <= input.size() -1; index++) {
            if(index > indexOfLastFileToMoveToFront) {
                break;
            }
            int fileID = input.get(index);
            if (fileID == -1) {
                indexOfLastFileToMoveToFront = findLastFileIDUpTo(input, indexOfLastFileToMoveToFront);
                if(indexOfLastFileToMoveToFront < index){
                    break;
                }
                int fileToMoveToFront = input.get(indexOfLastFileToMoveToFront);

                compressedDiskSpace.add(fileToMoveToFront);
//                    have now dealt with the lastFileID so find up to previous value
                indexOfLastFileToMoveToFront--;

            } else {
                compressedDiskSpace.add(fileID);
            }
        }

        return compressedDiskSpace;
    }


    public static int findLastFileIDUpTo(ArrayList<Integer> input, int lastFileIDIndex){
        for (int last_index = lastFileIDIndex; last_index >= 0; last_index--) {
            if(input.get(last_index) != -1)
                return last_index;
        }
        return lastFileIDIndex;
    }


}